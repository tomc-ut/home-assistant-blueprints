blueprint:
  name: Scheduled Outlet
  description: >
    **Version: 1.0.4**
    
    Turns a switch ON and OFF based on two time schedules.
    Each schedule includes:
      - Month-day start and end (e.g., 05-01 to 09-30)
      - Days of the week
      - Off and on times

    The outlet defaults to ON and will turn OFF only during active timer windows.

    On Home Assistant restart, after a 5-minute delay, it will check and restore the correct state.
  domain: automation
  input:
    outlet:
      name: Outlet Switch
      description: "The switch or smart outlet you want to control."
      selector:
        entity:
          domain: switch

    # --- Time Set 1 ---
    set1_start_md:
      name: Set 1 - Start (MM-DD)
      description: "Start of the first schedule (format: MM-DD, e.g., 05-01)."
      selector:
        text:
    set1_end_md:
      name: Set 1 - End (MM-DD)
      description: "End of the first schedule (format: MM-DD, e.g., 09-30)."
      selector:
        text:
    set1_days:
      name: Set 1 - Days of Week
      description: "Days of the week the first schedule is active."
      selector:
        select:
          options:
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
            - Sunday
          multiple: true
    set1_off_time:
      name: Set 1 - Turn OFF Time
      description: "Time to turn OFF the outlet for the first schedule."
      selector:
        time:
    set1_on_time:
      name: Set 1 - Turn ON Time
      description: "Time to turn ON the outlet for the first schedule."
      selector:
        time:

    # --- Time Set 2 ---
    set2_start_md:
      name: Set 2 - Start (MM-DD)
      description: "Start of the second schedule (format: MM-DD, e.g., 10-01)."
      selector:
        text:
    set2_end_md:
      name: Set 2 - End (MM-DD)
      description: "End of the second schedule (format: MM-DD, e.g., 04-30)."
      selector:
        text:
    set2_days:
      name: Set 2 - Days of Week
      description: "Days of the week the second schedule is active."
      selector:
        select:
          options:
            - Monday
            - Tuesday
            - Wednesday
            - Thursday
            - Friday
            - Saturday
            - Sunday
          multiple: true
    set2_off_time:
      name: Set 2 - Turn OFF Time
      description: "Time to turn OFF the outlet for the second schedule."
      selector:
        time:
    set2_on_time:
      name: Set 2 - Turn ON Time
      description: "Time to turn ON the outlet for the second schedule."
      selector:
        time:

trigger:
  - platform: time
    at: !input set1_off_time
    id: set1_off

  - platform: time
    at: !input set1_on_time
    id: set1_on

  - platform: time
    at: !input set2_off_time
    id: set2_off

  - platform: time
    at: !input set2_on_time
    id: set2_on

  - platform: homeassistant
    event: start
    id: startup

variables:
  set1_start_md: !input set1_start_md
  set1_end_md: !input set1_end_md
  set1_days: !input set1_days
  set1_off_time: !input set1_off_time
  set1_on_time: !input set1_on_time
  set2_start_md: !input set2_start_md
  set2_end_md: !input set2_end_md
  set2_days: !input set2_days
  set2_off_time: !input set2_off_time
  set2_on_time: !input set2_on_time

  current_datetime: "{{ now() }}"
  today_date: "{{ current_datetime.date() }}"
  today_weekday: "{{ current_datetime.strftime('%A') }}"
  current_time: "{{ current_datetime.strftime('%H:%M') }}"

  # Parse start and end using current year and handle wrap-around logic
  set1_start_date: >-
    {{ (now().year|string) ~ '-' ~ set1_start_md }}
  set1_end_date: >-
    {{ (now().year|string) ~ '-' ~ set1_end_md }}
  set1_active: >-
    {% set today = now().date() %}
    {% set start = strptime(set1_start_date, '%Y-%m-%d').date() %}
    {% set end = strptime(set1_end_date, '%Y-%m-%d').date() %}
    {% if start <= end %}
      {{ start <= today <= end and today_weekday in set1_days }}
    {% else %}
      {{ (today >= start or today <= end) and today_weekday in set1_days }}
    {% endif %}
  in_set1_off_window: >-
    {{ set1_active and (set1_off_time <= current_time < set1_on_time) }}

  set2_start_date: >-
    {{ (now().year|string) ~ '-' ~ set2_start_md }}
  set2_end_date: >-
    {{ (now().year|string) ~ '-' ~ set2_end_md }}
  set2_active: >-
    {% set today = now().date() %}
    {% set start = strptime(set2_start_date, '%Y-%m-%d').date() %}
    {% set end = strptime(set2_end_date, '%Y-%m-%d').date() %}
    {% if start <= end %}
      {{ start <= today <= end and today_weekday in set2_days }}
    {% else %}
      {{ (today >= start or today <= end) and today_weekday in set2_days }}
    {% endif %}
  in_set2_off_window: >-
    {{ set2_active and (set2_off_time <= current_time < set2_on_time) }}

action:
  - choose:
      - conditions:
          - condition: trigger
            id: startup
        sequence:
          - delay: "00:05:00"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ in_set1_off_window or in_set2_off_window }}"
                sequence:
                  - service: switch.turn_off
                    target:
                      entity_id: !input outlet
              - conditions:
                  - condition: template
                    value_template: "{{ not in_set1_off_window and not in_set2_off_window }}"
                sequence:
                  - service: switch.turn_on
                    target:
                      entity_id: !input outlet

      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'set1_off' and set1_active }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input outlet

      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'set1_on' and set1_active }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input outlet

      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'set2_off' and set2_active }}"
        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input outlet

      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'set2_on' and set2_active }}"
        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input outlet

mode: single
